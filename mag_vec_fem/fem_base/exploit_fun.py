# coding=utf-8
import numpy as np
import fem_base.gaugeInvariantFEM as gi
from fem_base.mesh import HyperCube
from fem_base.graphics import *
from fem_base.potentials import interpolate_pot

import time
import os
from os import getcwd
from os.path import dirname

d=2

data_path=os.path.realpath(os.path.join(os.path.dirname(__file__), '..','data'))

'''def res_path_f():
    directory = getcwd()
    if __file__.startswith(directory+'/'):
        file= __file__.replace(directory+'/', '',1)
    else:
        print('file and directory error')
    return dirname(file)'''

def vth_data(lnm,h,pot_version,**kwargs):
    Th=kwargs.get('Th',None)
    if Th==None:
        Th=HyperCube(2,int(1/h),l=1)
    nameV=os.path.realpath(os.path.join(data_path,'pre_interp_pot','pre_interp_potv'+str(pot_version)+'l'+str(lnm)+'E1eVx15.npy'))
    nameq=os.path.realpath(os.path.join(data_path,'Vq','Vql'+str(lnm)+'.npy'))
    V_preinterp=np.load(nameV)
    points=np.load(nameq)
    points=points*1/(np.max(points)+np.max(-points))
    V=interpolate_pot(V_preinterp,points,Th.q)
    return V,Th

def getsave_eig(N_eig,lnm,B,V_1,V_max,Th,h,pot_version,gauge,**kwargs):
    E_0=B/2
    res_path=kwargs.get('res_path',data_path)
    t_e=kwargs.get('target_energy',E_0)
    Vq=V_max*V_1
    namedata='l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'v'+str(pot_version)+gauge
    print("Get first "+str(N_eig)+" eigenfunctions : 2D Magnetic Schrödinger"+namedata)
    w,x=gi.get_eigvv(N=N_eig,B=B,h=h,gauge=gauge,V=Vq,Th=Th,target_energy=t_e)
    tstart=time.time()

    #ordering eigenstates:
    wtype=[('energy', float), ('rank', int)]
    w_=[(w[i],i) for i in range(N_eig)]
    w_disordered=np.array(w_,dtype=wtype)
    w_ord=np.sort(w_disordered,axis=0,order='energy')
    I=[i[1] for i in w_ord]
    w=np.array([i[0] for i in w_ord])
    x_=np.copy(x)
    for i in range(N_eig):
        x[:,i]=x_[:,I[i]]
    t_order=time.time()-tstart
    print("ordering time:",t_order)
    tstart=time.time()

    print("Post-processing")
    #save in one compressed numpy file: V in nq array, th.q , w ordered in N_eig array, x ordered in nq*N_eig array

    np.savez_compressed(os.path.realpath(os.path.join(res_path,'eigendata',namedata+'eig'+str(N_eig))),q=Th.q,V=Vq,eig_val=w,eig_vec=x)
    t_postpro=time.time()-tstart
    print("saving time:",t_postpro)
    return

def get_eigplots(N_eig,lnm,B,V,V_max,Th,h,pot_version,gauge,**kwargs):
    E_0=B/2
    res_path=kwargs.get('res_path',data_path)
    t_e=kwargs.get('target_energy',E_0)
    l=1
    Mod=kwargs.get('Modulus',True)
    Im=kwargs.get('Imaginary',False)
    Re=kwargs.get('Real',False)
    phase=kwargs.get('Phase',False)
    color=kwargs.get('color','turbo')

    print("Get first "+str(N_eig)+" eigenfunctions : 2D Magnetic Schrödinger")
    w,x=gi.get_eigvv(N=N_eig,B=B,h=h,gauge=gauge,V=V,Th=Th,target_energy=t_e)
    tstart=time.time()
    #ordering eigenstates:
    wtype=[('energy', float), ('rank', int)]
    w_=[(w[i],i) for i in range(N_eig)]
    w_disordered=np.array(w_,dtype=wtype)
    w_ord=np.sort(w_disordered,axis=0,order='energy')
    I=[i[1] for i in w_ord]
    w=np.array([i[0] for i in w_ord])
    x_=np.copy(x)
    for i in range(N_eig):
        x[:,i]=x_[:,I[i]]
        t_order=time.time()-tstart
    tstart=time.time()
    print("Post-processing")
    print(w)
    n=1
    plt.close()
    for i in w:
        print(n)
        E_proxy="{:.2e}".format(w[n-1])

        if Mod:
            plt.figure(3*n-2)
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,np.abs(x[:,n-1]),fill=True,colorbar=True,color=color)
            ti,tle='2D Magnetic Schrödinger : eigenfunction '+str(n)+' ',' $E_{'+str(n)+'}='+str(E_proxy)+'$)'
            t1=os.path.join('eigenplots','l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'eig'+str(n)+gauge+'v'+str(pot_version)+'_mod.png')
            plt.title(ti+'(modulus)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t1)))
            plt.close(3*n-2)
    

        if Re:
            plt.figure(3*n-1)
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,(x[:,n-1]).real,fill=True,colorbar=True,color=color)
            t2=os.path.join('eigenplots','l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'eig'+str(n)+gauge+'v'+str(pot_version)+'_real')
            plt.title(ti+'(real part)'+tle)
            plt.savefig(res_path+t2)
            plt.close(3*n-1)

        if Im:
            plt.figure(3*n)
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,x[:,n-1].imag,fill=True,colorbar=True, color=color)
            t3=os.path.join('eigenplots','l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'eig'+str(n)+gauge+'v'+str(pot_version)+'_im.png')
            plt.title(ti+'(imaginary part)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t3)))
            plt.close(3*n)

        if phase:
            plt.figure(3*n)
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,np.angle(x[:,n-1]),fill=True,colorbar=True, color='twilight')
            t4=os.path.join('eigenplots','l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'eig'+str(n)+gauge+'v'+str(pot_version)+'_phase.png')
            plt.title(ti+'(phase)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t4)))
            plt.close(3*n)

        n+=1
    t_postpro=time.time()-tstart
    print('ordering time',t_order)
    print('postprocessing time',t_postpro)
    return

def datafile(lnm,B,V_max,h,pot_version,gauge,N_eig,**kwargs):
    res_path=kwargs.get('res_path',data_path)
    namedata=os.path.realpath(os.path.join(res_path,'eigendata','l'+str(lnm)+'B'+str(B)+'V'+str(V_max)+'h'+str(int(1/h))+'v'+str(pot_version)+gauge+'eig'+str(N_eig)+'.npz'))
    return np.load(namedata,allow_pickle=True)

def read_eigplot(nfig,lnm,B,Th,data_file,Num,function_part):
    x,w=data_file['eig_vec'],data_file['eig_val']
    n=Num
    E_proxy="{:.2e}".format(w[n-1])
    color='turbo'
    if function_part=='real':
        part=np.real
    elif function_part=='imaginary':
        part=np.imag
    elif function_part=='modulus':
        part=np.abs
    elif function_part=='phase':
        part=np.angle
        color='twilight'
    plt.figure(nfig)
    plt.clf()
    #PlotBounds(Th,legend=False,color='k')
    plt.axis('off')
    PlotIsolines(Th,part(x[:,n-1]),fill=True,colorbar=True,color=color)
    ti,tle='L='+str(lnm)+'nm, B='+str(B)+'T: eigenfunction '+str(n)+' ',' $E_{'+str(n)+'}='+str(E_proxy)+'$)'
    plt.title(ti+'('+function_part+')'+tle)
    return

def save_eigplot(nfig,lnm,Th,data_file,Num,function_part,name_preeig,**kwargs):
    res_path=kwargs.get('res_path',data_path)
    x,w=data_file['eig_vec'],data_file['eig_val']
    n=Num
    E_proxy="{:.2e}".format(w[n-1])
    color=kwargs.get('color','turbo')
    if function_part=='real':
        part=np.real
    elif function_part=='imaginary':
        part=np.imag
    elif function_part=='modulus':
        part=np.abs
    elif function_part=='phase':
        part=np.angle
        color='twilight'
    plt.figure(nfig)
    plt.clf()
    #PlotBounds(Th,legend=False,color='k')
    plt.axis('off')
    PlotIsolines(Th,part(x[:,n-1]),fill=True,colorbar=True,color=color)
    ti,tle='Eigenfunction '+str(n)+' ',' $E_{'+str(n)+'}='+str(E_proxy)+'$)'
    t1=os.path.realpath(os.path.join('loose_eigenplots',name_preeig+'eig'+str(n)+'_'+function_part+'.png'))
    plt.title(ti+function_part+tle)
    plt.savefig(os.path.realpath(os.path.join(res_path,t1)))
    plt.close()
    return

def saveplots_fromdata(Th,data_file,name_preeig,**kwargs):
    res_path=kwargs.get('res_path',data_path)
    Mod=kwargs.get('modulus',True)
    Im=kwargs.get('imaginary',False)
    Re=kwargs.get('real',False)
    Phase=kwargs.get('phase',False)
    color=kwargs.get('color','turbo')
    x,w=data_file['eig_vec'],data_file['eig_val']
    n=1
    if not os.path.exists(os.path.realpath(os.path.join(res_path,'eigenplots'))):
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots')))
    if not os.path.exists(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig))):
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig)))
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig,'modulus')))
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig,'real')))
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig,'imaginary')))
    if not os.path.exists(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig,'phase'))):
        os.makedirs(os.path.realpath(os.path.join(res_path,'eigenplots',name_preeig,'phase')))

    for i in w:
        E_proxy="{:.3e}".format(w[n-1])

        if Mod:
            f=plt.figure()
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,np.abs(x[:,n-1]),fill=True,colorbar=True,color=color)
            ti,tle='Eigenfunction '+str(n)+' ',' $E_{'+str(n)+'}='+str(E_proxy)+'$)'
            t1=os.path.join('eigenplots',name_preeig,'modulus','eig'+str(n)+'_mod.png')
            plt.title(ti+'(modulus)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t1)))
            plt.clf()
            plt.close()
    

        if Re:
            f=plt.figure()
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,(x[:,n-1]).real,fill=True,colorbar=True,color=color)
            t2=os.path.join('eigenplots',name_preeig,'real','eig'+str(n)+'_real')
            plt.title(ti+'(real part)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t2)))
            plt.clf()
            plt.close()

        if Im:
            f=plt.figure()
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,x[:,n-1].imag,fill=True,colorbar=True,color=color)
            t3=os.path.join('eigenplots',name_preeig,'imaginary','eig'+str(n)+'_im.png')
            plt.title(ti+'(imaginary part)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t3)))
            plt.clf()
            plt.close()
        
        if Phase:
            f=plt.figure()
            plt.clf()
            PlotBounds(Th,legend=False,color='k')
            plt.axis('off')
            PlotIsolines(Th,np.angle(x[:,n-1]),fill=True,colorbar=True,color='twilight')
            t4=os.path.join('eigenplots',name_preeig,'phase','eig'+str(n)+'_phase.png')
            plt.title(ti+'(imaginary part)'+tle)
            plt.savefig(os.path.realpath(os.path.join(res_path,t4)))
            plt.clf()
            plt.close()
        n+=1
    return